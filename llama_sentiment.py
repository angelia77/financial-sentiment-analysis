# -*- coding: utf-8 -*-
"""llama_sentiment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KNrrRl6wj0pQEAYxdGaB_-qK5pyhsVaG
"""

!pip install bitsandbytes

!pip install huggingface_hub[hf_xet]

import torch
from transformers import AutoModelForCausalLM, AutoTokenizer, BitsAndBytesConfig, pipeline, TorchAoConfig
from huggingface_hub import login
import pandas as pd
import re

# Hugging Face token set up
# !pip install -q huggingface_hub
login(token="TOKEN")

class SentimentAnalyzer:
    def __init__(self, model_name="meta-llama/Meta-Llama-3-8B-Instruct"):
        self.model_name = model_name
        self.tokenizer = None
        self.model = None
        self._load_model_and_tokenizer()

    def _load_model_and_tokenizer(self):
        print(f"Loading model: {self.model_name} and tokenizer...")
        self.tokenizer = AutoTokenizer.from_pretrained(self.model_name, padding_side="left")

        bnb_config = BitsAndBytesConfig(
            load_in_4bit=True,
            bnb_4bit_quant_type="nf4",
            bnb_4bit_compute_dtype=torch.float16,
            bnb_4bit_use_double_quant=True,
        )

        self.model = AutoModelForCausalLM.from_pretrained(
            self.model_name,
            torch_dtype=torch.float16,
            quantization_config=bnb_config,
            device_map="auto"
        )
        if self.tokenizer.pad_token is None:
            self.tokenizer.pad_token = self.tokenizer.eos_token
        print("Model and tokenizer loaded.")

    def get_sentiment_llama3(self, texts):
        sentiment_results = []
        system_prompt = (
            '''You are an experienced financial analyst. Analyze the sentiment of the text in { } carefully.

            Scoring Guide:
            Assign a number from 0-9
            0: Most negative sentiment
            4-5: Neutral sentiment
            9: Mostositive sentiment

            Provide your answer in the following format:
            Score: [Your Score]
            Explanation: [Your detailed explanation for the score]

            Example 1:
            {The company is bankrupt and sales are declining fast.}
            Answer:
            Score: 1
            Explanation: The text mentions bankruptcy and declining sales, which are strong indicators of negative financial performance.

            Example 2:
            {Earnings remained stable, and outlook is neutral pending market changes.}
            Answer:
            Score: 4
            Explanation: The text explicitly states that earnings are stable and the outlook is neutral, indicating no strong positive or negative sentiment.

            Example 3:
            {Revenue, profits, and guidance all significantly exceeded expectations.}
            Answer:
            Score: 8
            Explanation: The text highlights that key financial metrics (revenue, profits, guidance) significantly exceeded expectations, which is a strong positive indicator.'''
        )

        try:
            prompts = [f"<|system|>\n{system_prompt}\n<|user|>\n{{{text}}}\n<|assistant|>\n" for text in texts]

            inputs = self.tokenizer(prompts, return_tensors="pt", padding=True, truncation=True, max_length=512).to(self.model.device)

            outputs = self.model.generate(
                **inputs,
                max_new_tokens=100, # Increase tokens to allow for explanation
                do_sample=False,
                pad_token_id=self.tokenizer.eos_token_id
            )

            decoded_outputs = self.tokenizer.batch_decode(outputs, skip_special_tokens=True)

            for decoded in decoded_outputs:
                score = None
                explanation = None

                # Extract the part after <|assistant|>
                assistant_text_match = re.search(r"<\|assistant\|>\s*(.*)", decoded, re.S)
                if assistant_text_match:
                    assistant_output = assistant_text_match.group(1).strip()

                    # Extract Score
                    score_match = re.search(r"Score:\s*(\d+)\b", assistant_output)
                    if score_match:
                        score = int(score_match.group(1))

                    # Extract Explanation
                    explanation_match = re.search(r"Explanation:\s*(.*)", assistant_output, re.S)
                    if explanation_match:
                        explanation = explanation_match.group(1).strip()

                sentiment_results.append({'score': score, 'explanation': explanation})

        except Exception as e:
            print(f"Error processing batch: {e}")
            sentiment_results.extend([{'score': None, 'explanation': f"Error: {e}"}] * len(texts))

        return sentiment_results


    def process_dataframe(self, df, text_column, batch_size=10):
        """
        Processes a pandas DataFrame to add sentiment score and explanation columns.
        Args:
            df (pd.DataFrame): The input DataFrame.
            text_column (str): The name of the column containing the text to analyze.
            batch_size (int): The number of texts to process in each batch.
        Returns:
            pd.DataFrame: The DataFrame with new 'sentiment_score' and 'explanation' columns.
        """
        all_results = []
        total_batches = (len(df) + batch_size - 1) // batch_size
        print(f"Processing {len(df)} texts in {total_batches} batches with batch size {batch_size}...")

        for i in range(0, len(df), batch_size):
            print(f"Processing batch {i // batch_size + 1}/{total_batches}...")
            batch_texts = df[text_column][i:i+batch_size].tolist()
            batch_results = self.get_sentiment_llama3(batch_texts)
            all_results.extend(batch_results)

        df['sentiment_score'] = [res['score'] for res in all_results]
        df['explanation'] = [res['explanation'] for res in all_results]
        return df

data = {'component_text': [
    "We will lose money.",
    "Sales are booming!",
    "The market is stable.",
    "Profit margins are decreasing.",
    "New product launch expected to boost revenue.",
    "Uncertainty in global economy.",
    "Company acquired by a larger firm.",
    "Investment in R&D is increasing.",
    "Facing supply chain issues.",
    "Excellent quarterly results reported."
]}
df = pd.DataFrame(data)

# Ensure the model name is the instruct version for chat-like formatting
analyzer = SentimentAnalyzer(model_name="meta-llama/Meta-Llama-3-8B-Instruct")
df_with_sentiment = analyzer.process_dataframe(df, 'component_text', batch_size=10)

# Display the updated DataFrame
print("\nDataFrame with Sentiment Scores and Explanations:")
df_with_sentiment

# Save the output df to a csv
df_with_sentiment.to_csv('sentiment_output.csv', index=False)