import pandas as pd
import torch
from transformers import pipeline

class FinancialTextPreprocessor:
    def __init__(self, summarizer_model="facebook/bart-large-cnn"):
        self.summarizer = pipeline(
            "summarization",
            model=summarizer_model,
            device=0 if torch.cuda.is_available() else -1
        )
        self.tokenizer = self.summarizer.tokenizer

    def chunk_text(self, text, max_tokens=1024):
        tokens = self.tokenizer.encode(text)
        chunks = [tokens[i:i + max_tokens] for i in range(0, len(tokens), max_tokens)]
        return [self.tokenizer.decode(chunk, skip_special_tokens=True) for chunk in chunks]

    def summarize_text(self, text):
        try:
            if len(self.tokenizer.encode(text)) > 1024:
                chunks = self.chunk_text(text)
                summaries = [
                    self.summarizer(chunk, max_length=128, min_length=30, do_sample=False)[0]['summary_text']
                    for chunk in chunks
                ]
                return ' '.join(summaries)
            else:
                return self.summarizer(text, max_length=128, min_length=30, do_sample=False)[0]['summary_text']
        except Exception as e:
            print(f"Error summarizing text: {e}")
            return "[SUMMARY FAILED]"

    def process_dataframe(self, input_file, text_column, output_file=None):
        df = pd.read_csv(input_file)
        print(f"Processing {len(df)} rows...")

        df['summary'] = df[text_column].apply(self.summarize_text)

        if output_file:
            df.to_csv(output_file, index=False)
            print(f"Saved summarized data to {output_file}")

        return df


def get_log_return_21d(ticker, date):
    try:
        data = yf.download(ticker, start=date, end=date + pd.Timedelta(days=45), progress=False)
        data = data["Adj Close"].dropna()
        if len(data) >= 22:
            p0 = data.iloc[0]
            p21 = data.iloc[21]
            return np.log(p21 / p0)
    except:
        return np.nan
    return np.nan

df["log_return_21d"] = df.apply(
    lambda row: get_log_return_21d(row["company_ticker"], row["date"]),
    axis=1
)
