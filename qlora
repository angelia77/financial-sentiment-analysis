from datasets import load_dataset
from transformers import AutoTokenizer, AutoModelForCausalLM, TrainingArguments, BitsAndBytesConfig
from trl import SFTTrainer
from peft import LoraConfig, get_peft_model, prepare_model_for_kbit_training
import torch

# Config
model_name = "meta-llama/Meta-Llama-3-8B-Instruct"
dataset_name = "yelp_review_full"  # Or your own local JSON/CSV
text_field = "text"
output_dir = "./llama3-sentiment-qlora"

# Load dataset
dataset = load_dataset(dataset_name, split="train[:2%]")  # Small subset for demo

# Load tokenizer
tokenizer = AutoTokenizer.from_pretrained(model_name, trust_remote_code=True)
tokenizer.pad_token = tokenizer.eos_token

# QLoRA quant config
bnb_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_compute_dtype=torch.float16,
    bnb_4bit_use_double_quant=True,
    bnb_4bit_quant_type="nf4"
)

# Load model with 4-bit quantization
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    quantization_config=bnb_config,
    device_map="auto",
    torch_dtype=torch.float16,
)

# Prepare for QLoRA training
model = prepare_model_for_kbit_training(model)

# PEFT: LoRA config
peft_config = LoraConfig(
    r=8,
    lora_alpha=16,
    lora_dropout=0.05,
    bias="none",
    task_type="CAUSAL_LM"
)

model = get_peft_model(model, peft_config)

# Format dataset for SFT
def format_row(example):
    prompt = f"<|user|>\n{text_field}: {example[text_field]}\n<|assistant|>\n"
    label = str(example["label"])
    return {"text": prompt + label}

dataset = dataset.map(format_row)
dataset = dataset.train_test_split(test_size=0.1)

# Training arguments
training_args = TrainingArguments(
    output_dir=output_dir,
    per_device_train_batch_size=2,
    gradient_accumulation_steps=4,
    num_train_epochs=2,
    logging_steps=10,
    save_strategy="epoch",
    learning_rate=2e-4,
    bf16=True,
    save_total_limit=2,
    push_to_hub=False,
)

# SFT trainer
trainer = SFTTrainer(
    model=model,
    train_dataset=dataset["train"],
    eval_dataset=dataset["test"],
    dataset_text_field="text",
    tokenizer=tokenizer,
    args=training_args,
    peft_config=peft_config
)

trainer.train()
